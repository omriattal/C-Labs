     1                                  section .data
     2 00000000 48656C6C6F2C20496E-     hello_infected: db "Hello, Infected file!",10,0
     2 00000009 666563746564206669-
     2 00000012 6C65210A00         
     3                                  
     4                                  section .text
     5                                  global _start
     6                                  global system_call
     7                                  global infector
     8                                  global infection
     9                                  global code_start
    10                                  global code_end
    11                                  
    12                                  extern main
    13                                  _start:
    14 00000000 59                          pop    dword ecx    ; ecx = argc
    15 00000001 89E6                        mov    esi,esp      ; esi = argv
    16                                      ;; lea eax, [esi+4*ecx+4] ; eax = envp = (4*ecx)+esi+4
    17 00000003 89C8                        mov     eax,ecx     ; put the number of arguments into eax
    18 00000005 C1E002                      shl     eax,2       ; compute the size of argv in bytes
    19 00000008 01F0                        add     eax,esi     ; add the size to the address of argv 
    20 0000000A 83C004                      add     eax,4       ; skip NULL at the end of argv
    21 0000000D 50                          push    dword eax   ; char *envp[]
    22 0000000E 56                          push    dword esi   ; char* argv[]
    23 0000000F 51                          push    dword ecx   ; int argc
    24                                  
    25 00000010 E8(00000000)                call    main        ; int main( int argc, char *argv[], char *envp[] )
    26                                  
    27 00000015 89C3                        mov     ebx,eax
    28 00000017 B801000000                  mov     eax,1
    29 0000001C CD80                        int     0x80
    30 0000001E 90                          nop
    31                                          
    32                                  system_call:
    33 0000001F 55                          push    ebp             ; Save caller state
    34 00000020 89E5                        mov     ebp, esp
    35 00000022 83EC04                      sub     esp, 4          ; Leave space for local var on stack
    36 00000025 60                          pushad                  ; Save some more caller state
    37                                  
    38 00000026 8B4508                      mov     eax, [ebp+8]    ; Copy function args to registers: leftmost...        
    39 00000029 8B5D0C                      mov     ebx, [ebp+12]   ; Next argument...
    40 0000002C 8B4D10                      mov     ecx, [ebp+16]   ; Next argument...
    41 0000002F 8B5514                      mov     edx, [ebp+20]   ; Next argument...
    42 00000032 CD80                        int     0x80            ; Transfer control to operating system
    43 00000034 8945FC                      mov     [ebp-4], eax    ; Save returned value...
    44 00000037 61                          popad                   ; Restore caller state (registers)
    45 00000038 8B45FC                      mov     eax, [ebp-4]    ; place returned value where caller can see it
    46 0000003B 83C404                      add     esp, 4          ; Restore caller state
    47 0000003E 5D                          pop     ebp             ; Restore caller state
    48 0000003F C3                          ret                     ; Back to caller
    49                                  
    50                                  code_start:
    51                                      infection:
    52 00000040 55                              push ebp       
    53 00000041 89E5                            mov ebp,esp
    54 00000043 60                              pushad
    55 00000044 9C                              pushfd
    56 00000045 B804000000                      mov eax,4 ;sys_write
    57 0000004A BB01000000                      mov ebx, 1 ;stdout
    58 0000004F B9[00000000]                    mov ecx, hello_infected ; insert location in memory
    59 00000054 BA17000000                      mov edx, 23 ; length of the string
    60 00000059 CD80                            int 0x80
    61 0000005B 9D                              popfd
    62 0000005C 61                              popad
    63 0000005D 5D                              pop ebp
    64 0000005E C3                              ret
    65                                      infector:
    66 0000005F 55                              push ebp
    67 00000060 89E5                            mov ebp,esp
    68 00000062 83EC04                          sub esp,4
    69 00000065 60                              pushad
    70 00000066 9C                              pushfd
    71 00000067 B805000000                      mov eax, 5 ;sys_open
    72 0000006C 8B5D08                          mov ebx, [ebp+8] ; file_name
    73 0000006F B901040000                      mov ecx, 1025 ; append
    74 00000074 BAFF010000                      mov edx, 511
    75 00000079 CD80                            int 0x80
    76 0000007B 8945FC                          mov [ebp -4], eax ; save file descriptor
    77 0000007E B804000000                      mov eax,4 ;sys_write
    78 00000083 8B5DFC                          mov ebx, [ebp-4] ; file descriptor
    79 00000086 B940000000                      mov ecx, 0x40
    80 0000008B BA62000000                      mov edx, 98
    81 00000090 CD80                            int 0x80
    82 00000092 B806000000                      mov eax, 6
    83 00000097 8B5DFC                          mov ebx, [ebp-4]
    84 0000009A CD80                            int 0x80
    85 0000009C 9D                              popfd
    86 0000009D 61                              popad
    87 0000009E 83C404                          add esp, 4
    88 000000A1 5D                              pop ebp
    89 000000A2 C3                              ret
    90                                  code_end:
    91                                  
    92                                  
    93                                  
    94                                  
